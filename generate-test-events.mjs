/**
 * Simple Event Generator - Creates test telemetry events
 *
 * This script generates the missing telemetry events to validate the pipeline
 */

import Redis from 'ioredis';

async function generateTestEvents() {
  console.log('ðŸš€ Generating test telemetry events...');

  const redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379');
  const streamKey = 'telemetry:events';

  // Expected events that should be generated by services
  const testEvents = [
    // Service startup events
    {
      eventType: 'service.started',
      service: 'emp-api',
      data: { port: 3331, version: '1.0.0' }
    },
    {
      eventType: 'service.started',
      service: 'emp-telemetry-collector',
      data: { port: 9090, mode: 'production' }
    },

    // Health check events
    {
      eventType: 'health.check',
      service: 'emp-api',
      data: { status: 'healthy', uptime: 12345 }
    },

    // Machine events
    {
      eventType: 'machine.registered',
      service: 'emp-machine',
      data: { machineId: 'machine-test-001', capabilities: ['gpu', 'comfyui'] }
    },

    // Worker events (more than just registered)
    {
      eventType: 'worker.registered',
      service: 'emp-worker',
      data: { workerId: 'worker-test-001', capabilities: ['image-gen'] }
    },
    {
      eventType: 'worker.heartbeat',
      service: 'emp-worker',
      data: { workerId: 'worker-test-001', status: 'active', jobsProcessed: 5 }
    },

    // WebSocket events
    {
      eventType: 'websocket.connection',
      service: 'emp-api',
      data: { socketId: 'socket-123', clientType: 'monitor' }
    },

    // Redis operations
    {
      eventType: 'redis.operation',
      service: 'emp-api',
      data: { operation: 'HMSET', key: 'job:12345', duration: 5 }
    },

    // Job lifecycle events
    {
      eventType: 'job.submitted',
      service: 'emp-api',
      data: { jobId: 'job-test-12345', type: 'image-generation', priority: 'high' }
    },
    {
      eventType: 'job.claimed',
      service: 'emp-worker',
      data: { jobId: 'job-test-12345', workerId: 'worker-test-001' }
    },
    {
      eventType: 'job.started',
      service: 'emp-worker',
      data: { jobId: 'job-test-12345', startTime: Date.now() }
    },
    {
      eventType: 'job.completed',
      service: 'emp-worker',
      data: { jobId: 'job-test-12345', duration: 30000, status: 'success' }
    }
  ];

  console.log(`ðŸ“Š Generating ${testEvents.length} test events...`);

  for (const event of testEvents) {
    const telemetryEvent = {
      timestamp: Date.now(),
      traceId: `trace-${event.eventType}-${Math.random().toString(36).substr(2, 8)}`,
      level: 'info',
      ...event
    };

    // Add to Redis stream
    await redis.xadd(streamKey, '*',
      'eventType', telemetryEvent.eventType,
      'service', telemetryEvent.service,
      'timestamp', telemetryEvent.timestamp.toString(),
      'traceId', telemetryEvent.traceId,
      'level', telemetryEvent.level,
      'data', JSON.stringify(telemetryEvent.data || {})
    );

    console.log(`âœ… Added: ${telemetryEvent.service} -> ${telemetryEvent.eventType}`);

    // Small delay to make events distinguishable
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  // Check stream length
  const streamLength = await redis.xlen(streamKey);
  console.log(`\nðŸŽ¯ Stream '${streamKey}' now has ${streamLength} events`);

  // Show recent events
  console.log('\nðŸ“‹ Recent events in stream:');
  const recent = await redis.xread('COUNT', '5', 'STREAMS', streamKey, '0');
  if (recent && recent.length > 0) {
    const [streamName, messages] = recent[0];
    for (const [messageId, fields] of messages) {
      const eventData = {};
      for (let i = 0; i < fields.length; i += 2) {
        eventData[fields[i]] = fields[i + 1];
      }
      console.log(`  ${messageId}: ${eventData.service} -> ${eventData.eventType}`);
    }
  }

  console.log('\nðŸ”„ Events are now in Redis stream. If telemetry collector is running,');
  console.log('   they should be processed and forwarded to Dash0 within a few seconds.');

  await redis.quit();
}

// Run the generator
generateTestEvents().catch(error => {
  console.error('ðŸ’¥ Error generating events:', error);
  process.exit(1);
});