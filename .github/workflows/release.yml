name: Release Worker Bundle

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: false
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Enable Corepack for pnpm
      run: corepack enable
        
    - name: Get release tag
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build and package worker
      run: |
        # Enable corepack and install dependencies
        corepack enable
        pnpm install --no-frozen-lockfile
        
        # Install esbuild for bundling (use npm for global installs in CI)
        npm install -g esbuild
        
        # Build only the necessary packages
        pnpm --filter @emp/core build
        pnpm --filter worker build
        
        # Create temporary directory for packaging
        mkdir -p worker-release
        
        # INJECT UNIQUE GITHUB RELEASE IDENTIFIER INTO WORKER CODE
        # This hardcoded message will only appear if the worker was downloaded from GitHub releases
        BUILD_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        RELEASE_ID="GITHUB-RELEASE-${{ steps.get_tag.outputs.tag }}-${BUILD_TIMESTAMP}"
        
        # Create a temporary modified worker file with injected release identifier
        # Use the original location to preserve import paths during bundling
        cp apps/worker/src/redis-direct-worker.ts apps/worker/src/redis-direct-worker-modified.ts
        
        # Inject hardcoded log message right after the worker startup
        sed -i 's/logger\.info(\`ðŸš€ Worker starting - timestamp: \${new Date()\.toISOString()}\`);/logger.info(`ðŸš€ Worker starting - timestamp: ${new Date().toISOString()}`);\'$'\n''  logger.info("ðŸ”¥ GITHUB RELEASE WORKER: '"${RELEASE_ID}"'");\'$'\n''  logger.info("ðŸ“¦ This worker was downloaded from GitHub releases!");/g' apps/worker/src/redis-direct-worker-modified.ts
        
        # Bundle worker into a single executable file using esbuild
        # This bundles all dependencies including @emp/core into a single file
        esbuild apps/worker/src/redis-direct-worker-modified.ts \
          --bundle \
          --platform=node \
          --target=node18 \
          --format=cjs \
          --external:sharp \
          --external:canvas \
          --external:@tensorflow/tfjs-node \
          --external:sqlite3 \
          --outfile=worker-release/redis-direct-worker.cjs
        
        # Add shebang to bundled worker and make executable
        # First remove any existing shebang from the bundled file, then add our own
        sed '/^#!/d' worker-release/redis-direct-worker.cjs > worker-release/redis-direct-worker-clean.cjs
        echo '#!/usr/bin/env node' > worker-release/redis-direct-worker.js
        cat worker-release/redis-direct-worker-clean.cjs >> worker-release/redis-direct-worker.js
        chmod +x worker-release/redis-direct-worker.js
        rm worker-release/redis-direct-worker.cjs worker-release/redis-direct-worker-clean.cjs
        
        # Clean up temporary modified file
        rm apps/worker/src/redis-direct-worker-modified.ts
        
        # Create a minimal package.json for the bundled worker with release version
        cat > worker-release/package.json << EOF
        {
          "name": "emp-job-queue-worker",
          "version": "${{ steps.get_tag.outputs.tag }}",
          "description": "Bundled Redis worker for EmProps GPU job queue system",
          "main": "redis-direct-worker.js",
          "bin": {
            "emp-worker": "redis-direct-worker.js"
          }
        }
        EOF
        
        # Create a simple README for the release
        cat > worker-release/README.md << 'EOF'
        # EmProps Job Queue Worker
        
        Self-contained bundled Redis worker for the EmProps GPU job queue system.
        
        ## Usage
        ```bash
        node redis-direct-worker.js
        ```
        
        ## Features
        - Single bundled executable (no external dependencies)
        - Supports ComfyUI, A1111, and simulation connectors
        - Direct Redis connection (no WebSocket hub required)
        - Multi-GPU support via CUDA_VISIBLE_DEVICES
        
        ## Environment Variables
        - `HUB_REDIS_URL` - Redis connection URL
        - `WORKER_ID` - Unique worker identifier  
        - `WORKER_CONNECTORS` - Comma-separated list (e.g., "comfyui,a1111,simulation")
        - `CUDA_VISIBLE_DEVICES` - GPU index for this worker
        - `GPU_MEMORY_GB` - Available GPU memory
        - `GPU_MODEL` - GPU model name
        EOF
        
        # Create tarball
        tar -czf emp-job-queue-worker.tar.gz -C worker-release .
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: Release ${{ steps.get_tag.outputs.tag }}
        body: |
          ## EmProps Job Queue Worker Release ${{ steps.get_tag.outputs.tag }}
          
          ### ðŸ“¦ Worker Bundle (emp-job-queue-worker.tar.gz)
          
          **Contents:**
          - `redis-direct-worker.js` - Single bundled executable (all dependencies included)
          - `package.json` - Package metadata
          - `README.md` - Usage instructions
          
          ### Installation
          
          1. Download `emp-job-queue-worker.tar.gz`
          2. Extract: `tar -xzf emp-job-queue-worker.tar.gz`
          3. Run: `node redis-direct-worker.js`
          
          ### Features
          
          - **Zero dependencies** - Single bundled file with everything included
          - **Multi-connector support** - ComfyUI, A1111, and simulation modes
          - **Direct Redis connection** - No WebSocket hub dependency
          - **Multi-GPU ready** - Use CUDA_VISIBLE_DEVICES for GPU assignment
          - **TypeScript-based** - Modern, type-safe worker implementation
          
          ### Environment Variables
          
          - `HUB_REDIS_URL` - Redis connection URL
          - `WORKER_ID` - Unique worker identifier  
          - `WORKER_CONNECTORS` - Comma-separated list (e.g., "comfyui,a1111,simulation")
          - `CUDA_VISIBLE_DEVICES` - GPU index for this worker
          - `GPU_MEMORY_GB` - Available GPU memory
          - `GPU_MODEL` - GPU model name
          
        files: |
          emp-job-queue-worker.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Redeploy to Railway
      run: |
        # Install Railway CLI globally using npm to avoid pnpm workspace issues
        npm install -g @railway/cli

        # Redeploy webhook service from Docker Hub (uses RAILWAY_TOKEN env var for auth)
        railway redeploy --service emp-webhook-service --yes

        # Redeploy API service from Docker Hub  
        railway redeploy --service emp-job-queue-production --yes

        # Redeploy Fluentd service from Docker Hub
        railway redeploy --service emp-fluentd --yes

        # Redeploy API service from Docker Hub  
        railway redeploy --service openai-machine --yes

        # Redeploy API service from Docker Hub  
        railway redeploy --service comfyui-remote-machine --yes
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}