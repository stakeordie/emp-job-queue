services:
  basic-machine:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        CACHE_BUST: ${CACHE_BUST:-1}
        # Custom nodes build-time secrets
        CUSTOM_NODES_CACHE_BUST: ${CUSTOM_NODES_CACHE_BUST:-default}
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY_ENCODED: ${AWS_SECRET_ACCESS_KEY_ENCODED}
        AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
        GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
        AZURE_STORAGE_ACCOUNT: ${AZURE_STORAGE_ACCOUNT}
        AZURE_STORAGE_KEY: ${AZURE_STORAGE_KEY}
        CLOUD_STORAGE_CONTAINER: ${CLOUD_STORAGE_CONTAINER}
        CLOUD_MODELS_CONTAINER: ${CLOUD_MODELS_CONTAINER}
        CLOUD_STORAGE_TEST_CONTAINER: ${CLOUD_STORAGE_TEST_CONTAINER}
        CLOUD_PROVIDER: ${CLOUD_PROVIDER}
        STATIC_MODELS: ${STATIC_MODELS}
        EMPROPS_DEBUG_LOGGING: ${EMPROPS_DEBUG_LOGGING}
        HF_TOKEN: ${HF_TOKEN}
        CIVITAI_TOKEN: ${CIVITAI_TOKEN}
        OLLAMA_HOST: ${OLLAMA_HOST}
        OLLAMA_PORT: ${OLLAMA_PORT}
        OLLAMA_DEFAULT_MODEL: ${OLLAMA_DEFAULT_MODEL}
        OPENAI_API_KEY: ${OPENAI_API_KEY}
    image: basic-machine:latest
    platform: linux/amd64
    container_name: ${CONTAINER_NAME:-basic-machine}
    hostname: ${CONTAINER_NAME:-basic-machine}
    restart: "no"  # Controlled by API instead of Docker
    
    # Fast shutdown for elastic scaling
    stop_grace_period: 2s   # Quick shutdown - jobs returned to queue
    stop_signal: SIGTERM    # Send SIGTERM for graceful shutdown
    
    # GPU support (disabled for testing)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]
    
    # Environment
    # env_file is specified via --env-file flag in commands
    environment:
      - NODE_ENV=production
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - TEST_MODE=${TEST_MODE}
      - NUM_GPUS=${NUM_GPUS}
      - GPU_MEMORY_GB=${GPU_MEMORY_GB}
      - GPU_MODEL=${GPU_MODEL}
      - CONTAINER_NAME=${CONTAINER_NAME}
      - HUB_REDIS_URL=${HUB_REDIS_URL}
      - WORKER_CONNECTORS=${WORKER_CONNECTORS}
      - WORKER_WEBSOCKET_AUTH_TOKEN=${WORKER_WEBSOCKET_AUTH_TOKEN}
      - WORKER_ID_PREFIX=${WORKER_ID_PREFIX}
      - ENABLE_NGINX=${ENABLE_NGINX}
      - ENABLE_COMFYUI=${ENABLE_COMFYUI}
      - ENABLE_A1111=${ENABLE_A1111}
      - ENABLE_REDIS_WORKERS=${ENABLE_REDIS_WORKERS}
      - ENABLE_OLLAMA=${ENABLE_OLLAMA}
      - WORKER_LOCAL_PATH=${WORKER_LOCAL_PATH}
      - LOG_LEVEL=${LOG_LEVEL}
      # ComfyUI Configuration
      - ENABLE_COMFYUI=${ENABLE_COMFYUI}
      - COMFYUI_CPU_ONLY=${COMFYUI_CPU_ONLY}
      - COMFYUI_PORT_START=${COMFYUI_PORT_START}
      - COMFYUI_REPO_URL=${COMFYUI_REPO_URL}
      - COMFYUI_BRANCH=${COMFYUI_BRANCH}
      - COMFYUI_COMMIT=${COMFYUI_COMMIT}
    
    # Ports are configured in docker-compose.override.yml
    # Generated from EXPOSED_PORTS in .env.local
    # Run: ./generate-docker-compose.sh to regenerate
    
    # Volumes
    volumes:
      # Shared directory structure  
      - ./data/shared:/workspace/shared
      - ./data/logs:/workspace/logs
      # Local worker bundle for development
      - ../../../apps/worker/bundled:/workspace/worker-bundled
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Health check disabled for elastic scaling - external orchestration handles failures
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 5m
    
    # Networks
    networks:
      - emp-network

# Development services
  redis:
    image: redis:7-alpine
    container_name: basic-machine-redis
    restart: "no"  # Controlled by API instead of Docker
    stop_grace_period: 10s  # Allow Redis to save data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - emp-network
    profiles:
      - dev

networks:
  emp-network:
    driver: bridge

volumes:
  redis-data: