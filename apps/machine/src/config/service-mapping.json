{
  "workers": {
    "emprops-app": {
      "services": ["comfyui", "a1111"],
      "is_gpu_bound": true,
      "job_service_required_map": [
        {
          "job_service_required": "comfyui",
          "worker_service": "comfyui"
        },
        {
          "job_service_required": "a1111",
          "worker_service": "a1111"
        }
      ]
    },
    "comfyui": {
      "services": ["comfyui"],
      "is_gpu_bound": true,
      "job_service_required_map": [
        {
          "job_service_required": "comfyui",
          "worker_service": "comfyui"
        }
      ]
    },

    "comfyui-remote": {
      "services": ["comfyui-remote"],
      "is_gpu_bound": false,
      "job_service_required_map": [
        {
          "job_service_required": "comfyui",
          "worker_service": "comfyui-remote"
        }
      ]
    },
    
    "simulation-websocket": {
      "services": ["simulation-websocket"],
      "is_gpu_bound": true,
      "job_service_required_map": [
        {
          "job_service_required": "simulation",
          "worker_service": "simulation-websocket" 
        }
      ]
    },

    "simulation-http": {
      "services": ["simulation-http"],
      "is_gpu_bound": true,
      "job_service_required_map": [
        {
          "job_service_required": "simulation",
          "worker_service": "simulation-http" 
        }
      ]
    },
    
    "a1111": {
      "services": ["a1111"],
      "is_gpu_bound": true,
      "job_service_required_map": [
        {
          "job_service_required": "a1111",
          "worker_service": "a1111"
        }
      ]
    },
    "openai": {
      "services": ["openai-text", "openai-image", "openai-img2img", "openai-responses"],
      "is_gpu_bound": false,
      "required_env": ["OPENAI_API_KEY", "OPENAI_IMAGE_MODEL", "CLOUD_STORAGE_PROVIDER"],
      "job_service_required_map": [
        {
          "job_service_required": "openai_text",
          "worker_service": "openai-text"
        },
        {
          "job_service_required": "openai_image",
          "worker_service": "openai-image"
        },
        {
          "job_service_required": "openai_img2img",
          "worker_service": "openai-img2img"
        },
        {
          "job_service_required": "openai_responses",
          "worker_service": "openai-responses"
        }
      ]
    },
    "openai-response": {
      "services": ["openai-responses"],
      "is_gpu_bound": false,
      "job_service_required_map": [
        {
          "job_service_required": "openai",
          "worker_service": "openai-responses"
        }
      ]
    },
    "gemini": {
      "services": ["gem-nano-banana"],
      "is_gpu_bound": false,
      "required_env": ["GEMINI_API_KEY"],
      "job_service_required_map": [
        {
          "job_service_required": "gem-nano-banana",
          "worker_service": "gem-nano-banana"
        }
      ]
    }
  },

  "machine_capabilities": {
    "auto_detect": {
      "gpu": {
        "detection_method": "nvidia-smi",
        "fallback": "environment_variable",
        "env_var": "NUM_GPUS"
      },
      "cpu_cores": {
        "detection_method": "os.cpus().length"
      },
      "memory": {
        "detection_method": "os.totalmem()"
      },
      "storage": {
        "detection_method": "fs.statSync"
      },
      "network_access": {
        "detection_method": "ping_test",
        "test_urls": ["api.openai.com", "github.com"]
      },
      "cloud_storage": {
        "detection_method": "environment_variable",
        "required_env": ["CLOUD_STORAGE_PROVIDER"]
      }
    },
    "static": {
      "docker": true,
      "node_js": true,
      "local_storage": true
    }
  },

  "connectors": {
    "ComfyUIWebSocketConnector": {
      "path": "./redis-direct-worker.js",
      "description": "Local ComfyUI WebSocket connector - uses internal ComfyUI installation"
    },
    "ComfyUIRemoteConnector": {
      "path": "./redis-direct-worker.js", 
      "description": "Remote ComfyUI WebSocket connector - connects to external ComfyUI instance"
    },
    "A1111WebSocketConnector": {
      "path": "./redis-direct-worker.js",
      "description": "Automatic1111 WebUI connector - uses local A1111 installation with shared models"
    },
    "SimulationHttpConnector": {
      "path": "./redis-direct-worker.js",
      "description": "Simulation processing connector for testing and development"
    },
    "SimulationWebsocketConnector": {
      "path": "./redis-direct-worker.js",
      "description": "Simulation processing connector for testing and development with Websocket"
    },
    "OpenAITextConnector": {
      "path": "./redis-direct-worker.js",
      "description": "OpenAI text generation API connector"
    },
    "OpenAIText2ImgConnector": {
      "path": "./redis-direct-worker.js",
      "description": "OpenAI text-to-image generation API connector"
    },
    "OpenAIImg2ImgConnector": {
      "path": "./redis-direct-worker.js",
      "description": "OpenAI image-to-image generation API connector"
    },
    "OpenAIResponsesConnector": {
      "path": "./redis-direct-worker.js",
      "description": "OpenAI Responses API connector for dynamic JSON payloads"
    },
    "GeminiConnector": {
      "path": "./redis-direct-worker.js",
      "description": "Google Gemini Image Generation API connector"
    }
  },

  "services": {
    "comfyui": {
      "connector": "ComfyUIWebSocketConnector",
      "type": "internal",
      "installer": "ComfyUIManagementClient",
      "installer_filename": "./services/comfyui-management-client.js",
      "is_gpu_bound": true,
      "build_stage": "comfyui",
      "service_instances_per_gpu": "${COMFYUI_INSTANCES_PER_GPU:-1}",
      "ports": ["${COMFYUI_BASE_PORT:-8188}"],
      "port_increment": "${COMFYUI_PORT_INCREMENT:-1}",
      "description": "ComfyUI image generation service with local installation",
      "installer_config": {
        "branch": "${COMFYUI_BRANCH:-main}",
        "repo_url": "${COMFYUI_REPO_URL:-https://github.com/stakeordie/ComfyUI.git}",
        "custom_nodes_enabled": "${COMFYUI_ENABLE_CUSTOM_NODES:-true}",
        "models_path": "${COMFYUI_MODELS_PATH:-/workspace/ComfyUI/models}",
        "install_timeout": "${COMFYUI_INSTALL_TIMEOUT:-300}"
      },
      "telemetry_logs": [
        {
          "path": "/workspace/ComfyUI/logs/output-gpu*.log",
          "name": "comfyui-gpu-output",
          "description": "ComfyUI GPU output logs (all GPUs)"
        },
        {
          "path": "/workspace/ComfyUI/logs/custom_nodes_install.log",
          "name": "comfyui-custom-nodes",
          "description": "ComfyUI custom nodes installation logs"
        },
        {
          "path": "/workspace/ComfyUI/logs/model_download.log", 
          "name": "comfyui-model-downloads",
          "description": "ComfyUI model download logs"
        }
      ]
    },
    
    "a1111": {
      "connector": "A1111WebSocketConnector",
      "type": "internal",
      "installer": "A1111ManagementClient",
      "installer_filename": "./services/a1111-management-client.js",
      "is_gpu_bound": true,
      "build_stage": "a1111",
      "service_instances_per_gpu": "${A1111_INSTANCES_PER_GPU:-1}",
      "ports": ["${A1111_BASE_PORT:-7860}"],
      "port_increment": "${A1111_PORT_INCREMENT:-1}",
      "description": "Automatic1111 WebUI with shared ComfyUI models and sd_models repository",
      "installer_config": {
        "branch": "${A1111_BRANCH:-main}",
        "repo_url": "${A1111_REPO_URL:-https://github.com/AUTOMATIC1111/stable-diffusion-webui.git}",
        "commit_hash": "${A1111_COMMIT_HASH:-cf2772fab0af5573da775e7437e6acdca424f26e}",
        "models_repo_url": "${A1111_MODELS_REPO_URL:-git@github.com:stakeordie/sd_models.git}",
        "comfyui_checkpoints_path": "${COMFYUI_CHECKPOINTS_PATH:-/workspace/ComfyUI/models/checkpoints}",
        "install_timeout": "${A1111_INSTALL_TIMEOUT:-300}"
      },
      "telemetry_logs": [
        {
          "path": "/workspace/a1111/webui.log",
          "name": "a1111-webui",
          "description": "Automatic1111 WebUI server logs"
        },
        {
          "path": "/workspace/a1111/extensions.log",
          "name": "a1111-extensions", 
          "description": "Automatic1111 extensions installation and runtime logs"
        }
      ]
    },
    
    "comfyui-remote": {
      "connector": "ComfyUIRemoteConnector",
      "type": "external",
      "installer": null,
      "installer_filename": null,
      "is_gpu_bound": false,
      "build_stage": "base",
      "description": "Remote ComfyUI WebSocket connector - connects to external ComfyUI instance"
    },
    
    "simulation-http": {
      "connector": "SimulationHttpConnector",
      "type": "internal",
      "installer": null,
      "installer_filename": null,
      "is_gpu_bound": true,
      "build_stage": "simulation",
      "service_instances_per_machine": "${SIMULATION_INSTANCES_PER_MACHINE:-10}",
      "ports": ["${SIMULATION_BASE_PORT:-8299}"],
      "port_increment": "${SIMULATION_PORT_INCREMENT:-0}",
      "description": "Simulation service for testing and development",
      "installer_config": {
        "test_mode": "${SIMULATION_TEST_MODE:-true}",
        "data_path": "${SIMULATION_DATA_PATH:-/workspace/simulation/data}",
        "capabilities": "${SIMULATION_CAPABILITIES:-image_generation,text_processing}"
      },
      "telemetry_logs": [
        {
          "path": "/workspace/simulation/processing.log",
          "name": "simulation-http-processing",
          "description": "Simulation HTTP service processing logs"
        },
        {
          "path": "/workspace/simulation/performance.log",
          "name": "simulation-http-performance", 
          "description": "Simulation HTTP service performance metrics"
        }
      ]
    },

    "simulation-websocket": {
      "connector": "SimulationWebsocketConnector",
      "type": "internal",
      "installer": null,
      "installer_filename": null,
      "is_gpu_bound": true,
      "build_stage": "simulation",
      "service_instances_per_machine": "${SIMULATION_WS_INSTANCES_PER_MACHINE:-10}",
      "ports": ["${SIMULATION_WS_BASE_PORT:-8399}"],
      "port_increment": "${SIMULATION_WS_PORT_INCREMENT:-0}",
      "description": "WebSocket simulation service for testing and development",
      "installer_config": {
        "test_mode": "${SIMULATION_WS_TEST_MODE:-true}",
        "data_path": "${SIMULATION_WS_DATA_PATH:-/workspace/simulation-ws/data}",
        "capabilities": "${SIMULATION_WS_CAPABILITIES:-websocket,realtime,streaming}"
      }
    },
    
    "openai-text": {
      "connector": "OpenAITextConnector",
      "type": "external",
      "installer": null,
      "installer_filename": null,
      "is_gpu_bound": false,
      "build_stage": "base",
      "required_env": ["OPENAI_API_KEY"],
      "description": "OpenAI text generation API connector",
      "api_config": {
        "base_url": "${OPENAI_BASE_URL:-https://api.openai.com/v1}",
        "timeout": "${OPENAI_TIMEOUT:-60}",
        "max_retries": "${OPENAI_MAX_RETRIES:-3}",
        "text_models": "${OPENAI_TEXT_MODELS:-gpt-4,gpt-3.5-turbo}"
      },
      "telemetry_logs": [
        {
          "path": "/workspace/logs/openai-sdk-*.log",
          "name": "openai-sdk-main",
          "description": "OpenAI SDK comprehensive logs with API requests, responses, and errors"
        },
        {
          "path": "/workspace/logs/openai-telemetry-*.log",
          "name": "openai-telemetry",
          "description": "OpenAI SDK telemetry logs with usage metrics, billing data, and performance"
        },
        {
          "path": "/workspace/logs/openai-errors-*.log",
          "name": "openai-errors", 
          "description": "OpenAI SDK error logs for troubleshooting and monitoring"
        }
      ]
    },
    
    "openai-image": {
      "connector": "OpenAIText2ImgConnector", 
      "type": "external",
      "installer": null,
      "installer_filename": null,
      "is_gpu_bound": false,
      "build_stage": "base",
      "required_env": ["OPENAI_API_KEY", "OPENAI_IMAGE_MODEL", "CLOUD_STORAGE_PROVIDER"],
      "description": "OpenAI image generation API connector",
      "api_config": {
        "base_url": "${OPENAI_BASE_URL:-https://api.openai.com/v1}",
        "timeout": "${OPENAI_TIMEOUT:-60}",
        "max_retries": "${OPENAI_MAX_RETRIES:-3}",
        "image_models": "${OPENAI_IMAGE_MODELS:-dall-e-3,dall-e-2}"
      },
      "telemetry_logs": [
        {
          "path": "/workspace/logs/openai-sdk-*.log",
          "name": "openai-sdk-main",
          "description": "OpenAI SDK comprehensive logs with API requests, responses, and errors"
        },
        {
          "path": "/workspace/logs/openai-telemetry-*.log",
          "name": "openai-telemetry",
          "description": "OpenAI SDK telemetry logs with usage metrics, billing data, and performance"
        },
        {
          "path": "/workspace/logs/openai-errors-*.log",
          "name": "openai-errors", 
          "description": "OpenAI SDK error logs for troubleshooting and monitoring"
        }
      ]
    },
    
    "openai-img2img": {
      "connector": "OpenAIImg2ImgConnector",
      "type": "external",
      "installer": null,
      "installer_filename": null,
      "is_gpu_bound": false, 
      "build_stage": "base",
      "required_env": ["OPENAI_API_KEY", "OPENAI_IMAGE_MODEL", "CLOUD_STORAGE_PROVIDER"],
      "description": "OpenAI image-to-image generation API connector",
      "api_config": {
        "base_url": "${OPENAI_BASE_URL:-https://api.openai.com/v1}",
        "timeout": "${OPENAI_TIMEOUT:-60}",
        "max_retries": "${OPENAI_MAX_RETRIES:-3}",
        "image_models": "${OPENAI_IMAGE_MODELS:-dall-e-3,dall-e-2}"
      },
      "telemetry_logs": [
        {
          "path": "/workspace/logs/openai-sdk-*.log",
          "name": "openai-sdk-main",
          "description": "OpenAI SDK comprehensive logs with API requests, responses, and errors"
        },
        {
          "path": "/workspace/logs/openai-telemetry-*.log",
          "name": "openai-telemetry",
          "description": "OpenAI SDK telemetry logs with usage metrics, billing data, and performance"
        },
        {
          "path": "/workspace/logs/openai-errors-*.log",
          "name": "openai-errors", 
          "description": "OpenAI SDK error logs for troubleshooting and monitoring"
        }
      ]
    },

    "openai-responses": {
      "connector": "OpenAIResponsesConnector",
      "type": "external",
      "installer": null,
      "installer_filename": null,
      "is_gpu_bound": false,
      "build_stage": "base",
      "required_env": ["OPENAI_API_KEY", "CLOUD_STORAGE_PROVIDER"],
      "description": "OpenAI Responses API connector for dynamic JSON payloads",
      "api_config": {
        "base_url": "${OPENAI_BASE_URL}",
        "timeout": "${OPENAI_TIMEOUT_SECONDS:-60}",
        "max_retries": "${OPENAI_RETRY_ATTEMPTS:-3}",
        "retry_delay": "${OPENAI_RETRY_DELAY_SECONDS:-5}",
        "max_concurrent_jobs": "${OPENAI_RESPONSES_MAX_CONCURRENT_JOBS:-5}"
      },
      "telemetry_logs": [
        {
          "path": "/workspace/logs/openai-responses-*.log",
          "name": "openai-responses-main",
          "description": "OpenAI Responses API connector logs with requests, responses, and polling"
        },
        {
          "path": "/workspace/logs/openai-responses-errors-*.log", 
          "name": "openai-responses-errors",
          "description": "OpenAI Responses API connector error logs for troubleshooting"
        }
      ]
    },
    
    "gem-nano-banana": {
      "connector": "GeminiConnector",
      "type": "external",
      "installer": null,
      "installer_filename": null,
      "is_gpu_bound": false,
      "build_stage": "base",
      "required_env": ["GEMINI_API_KEY"],
      "description": "Google Gemini Image Generation API connector",
      "api_config": {
        "base_url": "${GEMINI_NANO_BANANA_URL:-https://generativelanguage.googleapis.com}",
        "timeout": "${GEMINI_TIMEOUT:-45}",
        "max_retries": "${GEMINI_MAX_RETRIES:-3}",
        "max_concurrent_jobs": "${GEMINI_MAX_CONCURRENT_JOBS:-3}"
      },
      "telemetry_logs": [
        {
          "path": "/workspace/logs/gemini-*.log",
          "name": "gemini-main",
          "description": "Google Gemini API connector logs with requests, responses, and errors"
        },
        {
          "path": "/workspace/logs/gemini-errors-*.log",
          "name": "gemini-errors",
          "description": "Google Gemini API connector error logs for troubleshooting"
        }
      ]
    }
  },
  
  "service_types": {
    "internal": {
      "description": "Services that require installation and setup",
      "requires_installer": true,
      "has_ports": true,
      "has_pm2_process": true
    },
    "external": {
      "description": "External API services (no installation)",
      "requires_installer": false,
      "has_ports": false,
      "has_pm2_process": false
    }
  }
}