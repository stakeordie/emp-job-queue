# Fluent Bit Configuration for Worker Integration
# Collects logs from worker processes and forwards to Fluentd aggregation service

[SERVICE]
    Flush 5
    Log_Level info
    Daemon off
    
    # Parser configuration files
    Parsers_File /workspace/fluent-bit/fluent-bit-parsers.conf

# Collect all log files from services
[INPUT]
    Name tail
    Tag service.logs
    Path /workspace/logs/*.log
    Path_Key log_file
    Skip_Long_Lines On
    Skip_Empty_Lines On
    Refresh_Interval 5

# Extract service name from log file path
[FILTER]
    Name parser
    Match service.*
    Key_Name log_file
    Parser extract_service_name
    Reserve_Data On

# Translate service name to human-readable description
[FILTER]
    Name record_modifier
    Match service.*
    
    # Essential fields only
    Record machine_id ${MACHINE_ID}
    Record raw_service "unknown"
    Record log_source "worker-logs" 
    Record datetime ${STRFTIME:%Y-%m-%dT%H:%M:%S%z}

# Service name translation - manually configure as needed
[FILTER]
    Name modify
    Match service.*
    
    # ComfyUI services
    Condition Key_value_matches raw_service ^comfyui-gpu\d+$
    Set log_source "ComfyUI GPU Service"
    
    # Redis workers  
    Condition Key_value_matches raw_service ^redis-worker-.*-gpu\d+$
    Set log_source "Redis Worker (GPU-bound)"
    
    Condition Key_value_matches raw_service ^redis-worker-.*-\d+$
    Set log_source "Redis Worker"
    
    # Health services
    Condition Key_value_equals raw_service health-server
    Set log_source "Health Server"
    
    Condition Key_value_equals raw_service fluent-bit
    Set log_source "Fluent Bit Logger"
    
    # Simulation services
    Condition Key_value_matches raw_service ^simulation.*-gpu\d+$
    Set log_source "Simulation Service (GPU)"
    
    Condition Key_value_matches raw_service ^simulation.*-service$
    Set log_source "Simulation Service"
    
    # Add more mappings here as new services are discovered
    # Pattern: Condition Key_value_matches raw_service PATTERN
    #          Set log_source "Human Readable Description"
    #
    # WORKFLOW FOR ADDING NEW SERVICES:
    # 1. See unknown service in Dash0 logs (check raw_service field)
    # 2. Add mapping here using the patterns above
    # 3. Restart Fluent Bit: docker exec CONTAINER pm2 restart fluent-bit
    # 4. Verify in Dash0 that log_source now shows readable description
    #
    # Examples to add when discovered:
    # Condition Key_value_matches raw_service ^playwright-.*$
    # Set log_source "Playwright Browser Service"
    #
    # Condition Key_value_equals raw_service ollama-service  
    # Set log_source "Ollama LLM Service"

# Forward to Fluentd aggregation service  
[OUTPUT]
    Name http
    Match service.*
    Host ${FLUENTD_HOST:-host.docker.internal}
    Port ${FLUENTD_PORT:-8888}
    URI /worker-logs
    Format json
    
    # JSON formatting
    json_date_key timestamp
    json_date_format epoch
    
    # HTTP settings
    http_User ${FLUENTD_USER:-}
    http_Passwd ${FLUENTD_PASSWORD:-}
    header Content-Type application/json
    
    # Retry configuration
    Retry_Limit 3
    
    # Buffering
    storage.type filesystem
    storage.path /tmp/fluent-bit-buffer
    storage.sync normal
    storage.checksum off
    storage.max_chunks_up 128
    
    # Network timeouts
    net.connect_timeout 10s
    net.io_timeout 30s