# Minimal Dockerfile for external connectors (OpenAI, etc.)
# Target size: <3GB vs 19GB for full ComfyUI image

# Use Ubuntu 22.04 with Node.js 18 pre-installed (matches our current setup)
FROM sitespeedio/node:ubuntu-22.04-nodejs-18.18.0 AS minimal-base

    # Install essential packages and tools
    RUN apt-get update && \
        apt-get install -y --no-install-recommends curl wget git ca-certificates gnupg gettext-base && \
        npm install -g pnpm pm2 && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/*

    # Install OpenTelemetry Collector (lightweight) 
    RUN OTEL_VERSION="0.114.0" && \
        curl -fsSL "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v${OTEL_VERSION}/otelcol-contrib_${OTEL_VERSION}_linux_amd64.tar.gz" | \
        tar -xzC /usr/local/bin/ && \
        chmod +x /usr/local/bin/otelcol-contrib

    # Install Fluent Bit (required for all machines/workers)
    RUN FLUENT_BIT_VERSION="3.1.8" && \
        curl -fsSL "https://packages.fluentbit.io/fluentbit.key" | apt-key add - && \
        echo "deb https://packages.fluentbit.io/ubuntu/jammy jammy main" | tee /etc/apt/sources.list.d/fluent-bit.list && \
        apt-get update && \
        apt-get install -y fluent-bit=${FLUENT_BIT_VERSION}* && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/*

    # Set up working directory
    WORKDIR /workspace

    # Create minimal directory structure (no ComfyUI, no models)
    RUN mkdir -p \
        /workspace/logs \
        /workspace/configs \
        /workspace/tmp \
        /workspace/.pm2 \
        /workspace/scripts \
        /workspace/fluent-bit \
        /workspace/otel \
        /tmp/fluent-bit-buffer

    # Copy configuration templates
    COPY fluent-bit-worker.conf.template /workspace/fluent-bit/fluent-bit-worker.conf.template
    COPY otel-collector-machine.yaml.template /workspace/otel/otel-collector-machine.yaml.template
    RUN chmod 644 /workspace/fluent-bit/fluent-bit-worker.conf.template && \
        chmod 755 /tmp/fluent-bit-buffer

# Stage 2: Minimal machine for external connectors
FROM minimal-base AS minimal-machine

    # Build args for runtime configuration
    ARG WORKER_SPEC
    ARG WORKERS  
    ARG MACHINE_ID
    ARG ENV_FILE=.env
    ARG BUILD_TIMESTAMP

    # Convert build args to environment variables
    ENV WORKERS=${WORKERS}
    ENV MACHINE_ID=${MACHINE_ID}
    ENV BUILD_TIMESTAMP=${BUILD_TIMESTAMP}

    # Copy workspace packages for service configuration
    COPY .workspace-packages/ /service-manager/.workspace-packages/

    # Copy pre-processed minimal package.json (workspace references already converted)
    COPY package.minimal.docker.json /service-manager/package.json
    COPY pnpm-lock.yaml* /service-manager/

    # Install only production dependencies (no dev, no AI frameworks, no lockfile)  
    WORKDIR /service-manager
    RUN pnpm install --prod --no-frozen-lockfile --ignore-workspace

    # Copy application source (excluding AI-specific services)
    COPY src/ /service-manager/src/
    COPY scripts/ /service-manager/scripts/
    COPY generate-pm2-ecosystem-worker-driven.js /service-manager/generate-pm2-ecosystem-worker-driven.js

    # Copy bundled worker
    RUN mkdir -p /workspace/worker-bundled
    COPY worker-bundled/ /service-manager/worker-bundled/

    # Copy PM2 ecosystem config
    RUN cp /service-manager/scripts/pm2-ecosystem.config.cjs /workspace/pm2-ecosystem.config.cjs

    # Copy entrypoint scripts  
    COPY scripts/entrypoint-*.sh /scripts/
    RUN chmod +x /scripts/entrypoint-*.sh

    # Add build timestamp
    RUN echo "Minimal image built at: ${BUILD_TIMESTAMP}" > /workspace/BUILD_INFO.txt

    # Set environment
    ENV NODE_ENV=production \
        LOG_LEVEL=info \
        SERVICE_MANAGER_PATH=/service-manager \
        WORKSPACE_PATH=/workspace \
        PM2_HOME=/workspace/.pm2 \
        PATH="/service-manager/node_modules/.bin:${PATH}"

    # Use minimal entrypoint (no ComfyUI, no GPU dependencies)
    ENTRYPOINT ["/scripts/entrypoint-minimal.sh"]